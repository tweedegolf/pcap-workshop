fn get_array<T, const N: usize>(slice: &[T], start_index: usize) -> Option<&[T; N]> {
    slice.get(start_index..)?.get(..N)?.try_into().ok()
}

fn parse_u16(endianness: Endianness, slice: &[u8], start_index: usize) -> Option<u32> {
    todo!()
}

fn parse_u32(endianness: Endianness, slice: &[u8], start_index: usize) -> Option<u32> {
    let bytes = *get_array(slice, start_index)?;
    match endianness {
        Endianness::Le => Some(u32::from_le_bytes(bytes)),
        Endianness::Be => Some(u32::from_be_bytes(bytes)),
    }
}

enum Endianness {
    Le,
    Be,
}

#[derive(Debug, PartialEq)]
struct SectionHeaderBlock<'a> {
    major_version: u16,
    minor_version: u16,
    options: &'a [u8],
}

impl<'a> SectionHeaderBlock<'a> {
    fn parse(data: &'a [u8]) -> Option<Self> {
        // implement the same logic as in step1.rs, but this time
        //
        // - return an `Option<Self>`, where `None` indicates some sort of parse error
        // - use (and implement) the `parse_u*` functions to clean up number decoding
        // - use the `?` operator to do an early return when a `None` is hit

        // ...

        let byte_order_magic = parse_u32(Endianness::Le, data, 8)?;

        todo!()
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    const DATA: &[u8] = &[
        0x0a, 0x0d, 0x0d, 0x0a, 0x8c, 0x00, 0x00, 0x00, 0x4d, 0x3c, 0x2b, 0x1a, 0x01, 0x00, 0x00,
        0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x03, 0x00, 0x2d, 0x00, 0x4d, 0x61,
        0x63, 0x20, 0x4f, 0x53, 0x20, 0x58, 0x20, 0x31, 0x30, 0x2e, 0x31, 0x30, 0x2e, 0x34, 0x2c,
        0x20, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x20, 0x31, 0x34, 0x45, 0x34, 0x36, 0x20, 0x28, 0x44,
        0x61, 0x72, 0x77, 0x69, 0x6e, 0x20, 0x31, 0x34, 0x2e, 0x34, 0x2e, 0x30, 0x29, 0x00, 0x00,
        0x00, 0x04, 0x00, 0x34, 0x00, 0x44, 0x75, 0x6d, 0x70, 0x63, 0x61, 0x70, 0x20, 0x31, 0x2e,
        0x31, 0x32, 0x2e, 0x36, 0x20, 0x28, 0x76, 0x31, 0x2e, 0x31, 0x32, 0x2e, 0x36, 0x2d, 0x30,
        0x2d, 0x67, 0x65, 0x65, 0x31, 0x66, 0x63, 0x65, 0x36, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20,
        0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2d, 0x31, 0x2e, 0x31, 0x32, 0x29, 0x00, 0x00, 0x00,
        0x00, 0x8c, 0x00, 0x00, 0x0,
    ];

    #[test]
    fn empty_input_fails() {
        assert_eq!(SectionHeaderBlock::parse(&[]), None);
    }

    #[test]
    fn correct_input_works() {
        assert!(SectionHeaderBlock::parse(DATA).is_some());
    }
}
